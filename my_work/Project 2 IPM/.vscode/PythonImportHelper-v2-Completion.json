[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "CameraGeometry",
        "kind": 6,
        "importPath": "code.exercises.camera_geometry",
        "description": "code.exercises.camera_geometry",
        "peekOfCode": "class CameraGeometry(object):\n    def __init__(self, height=1.3, yaw_deg=0, pitch_deg=-5, roll_deg=0, image_width=1024, image_height=512, field_of_view_deg=45):\n        # scalar constants\n        self.height = height\n        self.pitch_deg = pitch_deg\n        self.roll_deg = roll_deg\n        self.yaw_deg = yaw_deg\n        self.image_width = image_width\n        self.image_height = image_height\n        self.field_of_view_deg = field_of_view_deg",
        "detail": "code.exercises.camera_geometry",
        "documentation": {}
    },
    {
        "label": "get_intrinsic_matrix",
        "kind": 2,
        "importPath": "code.exercises.camera_geometry",
        "description": "code.exercises.camera_geometry",
        "peekOfCode": "def get_intrinsic_matrix(field_of_view_deg, image_width, image_height):\n    \"\"\"\n    Returns intrinsic matrix K.\n    \"\"\"\n    # For our Carla camera alpha_u = alpha_v = alpha\n    # alpha can be computed given the cameras field of view via\n    field_of_view_rad = field_of_view_deg * np.pi/180\n    alpha = (image_width / 2.0) / np.tan(field_of_view_rad / 2.)\n    Cu = image_width / 2.0\n    Cv = image_height / 2.0",
        "detail": "code.exercises.camera_geometry",
        "documentation": {}
    },
    {
        "label": "project_polyline",
        "kind": 2,
        "importPath": "code.exercises.camera_geometry",
        "description": "code.exercises.camera_geometry",
        "peekOfCode": "def project_polyline(polyline_world, trafo_world_to_cam, K):\n    \"\"\"\n    Returns array uv which contains the pixel coordinates of the polyline.\n    Parameters\n    ----------\n    polyline_world : array_like, shape (M,3)\n        Each row of this array is a vertex (x,y,z) of the polyline.\n    trafo_world_to_cam : array_like, shape (4,4)\n        Transformation matrix, that maps vectors (x_world, y_world, z_world, 1) \n        to vectors (x_cam, y_cam, z_cam, 1).",
        "detail": "code.exercises.camera_geometry",
        "documentation": {}
    }
]